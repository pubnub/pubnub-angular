{"version":3,"sources":["webpack:///webpack/bootstrap 676a8cd18d3f03764bab","webpack:///./src/index.js","webpack:///./src/vendor/polyfill.js","webpack:///./src/pubnub.js","webpack:///./config.json","webpack:///./src/wrapper.js","webpack:///./src/mocks.js","webpack:///./src/pubnub_channel.js","webpack:///./src/pubnub_channel_group.js"],"names":[],"mappings":"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","file":"pubnub-angular.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 676a8cd18d3f03764bab\n **/","require('./vendor/polyfill.js');\nrequire('./pubnub.js');\nrequire('./pubnub_channel.js');\nrequire('./pubnub_channel_group.js');\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/* istanbul ignore next */\n// Object.create(proto[, propertiesObject])\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (typeof Object.create !== 'function') {\n  Object.create = (function () {\n    let Temp = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (prototype !== Object(prototype) && prototype !== null) {\n        throw new TypeError('Argument must be an object or null');\n      }\n      if (prototype === null) {\n        throw Error('null [[Prototype]] not supported');\n      }\n      Temp.prototype = prototype;\n      let result = new Temp();\n      Temp.prototype = null;\n      return result;\n    };\n  })();\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vendor/polyfill.js\n **/","/* global angular PUBNUB */\n\nconst config = require('../config.json');\nlet Wrapper = require('./wrapper.js');\n\nangular.module('pubnub.angular.service', [])\n  .factory('Pubnub', ['$rootScope', function ($rootScope) {\n    if (!angular.isDefined(PUBNUB)) {\n      throw new Error('PUBNUB is not in global scope. Ensure that pubnub.js file is included before pubnub-angular.js');\n    }\n\n    let service = {};\n    let wrappers = {};\n\n    /**\n     * Initializer for default instance\n     *\n     * @param {Object} initConfig\n     */\n    service.init = function (initConfig) {\n      return service.getInstance(config.default_instance_name).init(initConfig);\n    };\n\n    /**\n     * Instance getter\n     *\n     * @param instanceName\n     * @returns {Wrapper}\n     */\n    service.getInstance = function (instanceName) {\n      let instance = wrappers[instanceName];\n\n      if (angular.isDefined(instance) && instance instanceof Wrapper) {\n        return instance;\n      } else if (typeof instanceName === 'string' && instanceName.length > 0) {\n        wrappers[instanceName] = new Wrapper(instanceName, service, $rootScope);\n\n        // register the methods in the new wrapper\n        config.methods_to_delegate.forEach(method => {\n          wrappers[instanceName].wrapMethod(method);\n\n          service[method] = function (args) {\n            return this.getInstance(config.default_instance_name)[method](args);\n          };\n        });\n\n        return wrappers[instanceName];\n      }\n\n      return instance;\n    };\n\n    /**\n     * Generate unique method/callback event name\n     *\n     * @param {string} methodName\n     * @param {string} callbackName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getEventNameFor = function (methodName, callbackName, instanceName) {\n      if (!instanceName) instanceName = config.default_instance_name;\n\n      return [config.pubnub_prefix, instanceName, methodName, callbackName].join(':');\n    };\n\n    /**\n     * Generate unique message event name for specified channel\n     *\n     * @param {string} channelName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getMessageEventNameFor = function (channelName, instanceName) {\n      if (!instanceName) instanceName = config.default_instance_name;\n\n      return [config.pubnub_prefix, instanceName, 'subscribe', 'callback', channelName].join(':');\n    };\n\n    /**\n     * Generate unique presence event name for specified channel\n     *\n     * @param {string} channelName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getPresenceEventNameFor = function (channelName, instanceName) {\n      if (!instanceName) instanceName = config.default_instance_name;\n\n      return [config.pubnub_prefix, instanceName, 'subscribe', 'presence', channelName].join(':');\n    };\n\n    /**\n     * Subscribe method wrapper for default instance\n     *\n     * @param {object} args\n     */\n    service.subscribe = function (args) {\n      this.getInstance(config.default_instance_name).subscribe(args);\n    };\n\n    return service;\n  }]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pubnub.js\n **/","module.exports = {\n\t\"pubnub_prefix\": \"pubnub\",\n\t\"default_instance_name\": \"default\",\n\t\"methods_to_delegate\": [\n\t\t\"history\",\n\t\t\"replay\",\n\t\t\"publish\",\n\t\t\"unsubscribe\",\n\t\t\"here_now\",\n\t\t\"grant\",\n\t\t\"revoke\",\n\t\t\"audit\",\n\t\t\"time\",\n\t\t\"where_now\",\n\t\t\"state\",\n\t\t\"channel_group\",\n\t\t\"channel_group_list_channels\",\n\t\t\"channel_group_list_groups\",\n\t\t\"channel_group_list_namespaces\",\n\t\t\"channel_group_remove_channel\",\n\t\t\"channel_group_remove_group\",\n\t\t\"channel_group_remove_namespace\",\n\t\t\"channel_group_add_channel\",\n\t\t\"channel_group_cloak\",\n\t\t\"set_uuid\",\n\t\t\"get_uuid\",\n\t\t\"uuid\",\n\t\t\"auth\",\n\t\t\"set_cipher_key\",\n\t\t\"get_cipher_key\",\n\t\t\"raw_encrypt\",\n\t\t\"raw_decrypt\",\n\t\t\"set_heartbeat\",\n\t\t\"get_heartbeat\",\n\t\t\"set_heartbeat_interval\",\n\t\t\"get_heartbeat_interval\",\n\t\t\"mobile_gw_provision\"\n\t],\n\t\"common_callbacks_to_wrap\": [\n\t\t\"callback\",\n\t\t\"error\"\n\t],\n\t\"subscribe_callbacks_to_wrap\": [\n\t\t\"callback\",\n\t\t\"connect\",\n\t\t\"reconnect\",\n\t\t\"disconnect\",\n\t\t\"error\",\n\t\t\"idle\",\n\t\t\"presence\"\n\t]\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./config.json\n ** module id = 3\n ** module chunks = 0\n **/","/* global angular PUBNUB */\n\nconst config = require('../config.json');\nlet Mocks = require('./mocks.js');\n\nmodule.exports = class {\n  constructor(label, service, $rootScope) {\n    this.label = label;\n    this.mockingInstance = new Mocks(label, service, $rootScope);\n    this.pubnubInstance = null;\n  }\n\n  init(initConfig) {\n    this.pubnubInstance = new PUBNUB(initConfig);\n  }\n\n  getLabel() {\n    return this.label;\n  }\n\n  subscribe(args) {\n    let callbacks = this.mockingInstance.getCallbacksToMock(args, config.subscribe_callbacks_to_wrap);\n    this.mockingInstance.mockCallbacks(this.getLabel(), 'subscribe', args, callbacks);\n    this.getOriginalInstance().subscribe(args);\n  }\n\n  getOriginalInstance() {\n    if (this.pubnubInstance) {\n      return this.pubnubInstance;\n    } else {\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\n    }\n  }\n\n  wrapMethod(methodName) {\n    this[methodName] = (args) => {\n      if (angular.isObject(args)) {\n        let callbacks = this.mockingInstance.getCallbacksToMock(args, config.common_callbacks_to_wrap);\n        this.mockingInstance.mockCallbacks(this.getLabel(), methodName, args, callbacks);\n      }\n\n      return this.getOriginalInstance()[methodName](args);\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/wrapper.js\n **/","/* global angular */\nmodule.exports = class {\n\n  constructor(label, service, $rootScope) {\n    this.label = label;\n    this.$rootScope = $rootScope;\n    this.service = service;\n  }\n\n  /**\n   * Return the list of callbacks names allowed and enabled to be mocked.\n   *\n   * This methods given a list of callbacks names {{initialCallbackNames}} and the argument list\n   * of the function {{argsValue}} will return the list of callbacks names that can be mocked.\n   * This method is usefull for the {{mockCallbacks}} method in order to know which callback functions to mock.\n   *\n   * @param {Object} argsValue from method call\n   * @param {Array} initialCallbackNames from config object\n   * @returns {Array} of callbacks to mock\n   */\n  getCallbacksToMock(argsValue, initialCallbackNames) {\n    let triggerEventsValue = argsValue.triggerEvents;\n    let result = [];\n    let length;\n    let value;\n    let i;\n\n    if (triggerEventsValue === true) {\n      return initialCallbackNames;\n    } else if (angular.isObject(triggerEventsValue)) {\n      length = triggerEventsValue.length;\n\n      for (i = 0; i < length; i++) {\n        value = triggerEventsValue[i];\n        if (initialCallbackNames.indexOf(value) >= 0) result.push(value);\n      }\n\n      return result;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Mock passed in callbacks with callback-wrappers to invoke both original callbacks and angular events\n   *\n   * This method is replacing from the list of arguments {{args}} the callbacks functions\n   * allowed and enabled to be mocked provided by the {{callbackList}} by new callbacks functions\n   * including the Angular event broadcasting\n   *\n   * @param {string} instanceName\n   * @param {string} methodName\n   * @param {Object} methodArguments : argument list of the function\n   * @param {Array} callbacksList : list of callbacks functions to be mocked\n   */\n  mockCallbacks(instanceName, methodName, methodArguments, callbacksList) {\n    let originalCallback;\n    let currentCallbackName;\n\n    let l = callbacksList.length;\n    let i;\n\n    // Replace each callbacks allowed to be mocked.\n    for (i = 0; i < l; i++) {\n      if (!angular.isObject(methodArguments)) {\n        return;\n      }\n\n      currentCallbackName = callbacksList[i];\n      originalCallback = methodArguments[currentCallbackName];\n\n      // We replace the original callback with a mocked version.\n      methodArguments[currentCallbackName] = this.generateMockedVersionOfCallback(originalCallback, currentCallbackName, methodName, instanceName);\n    }\n  }\n\n\n  /**\n   * Returns a mocked version of the given callback broadcasting the callback through\n   * the AngularJS event broadcasting mechanism.\n   *\n   * @param {function} originalCallback\n   * @param {string} callbackName\n   * @param {string} methodName\n   * @param {string} instanceName\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\n   */\n\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName) {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n\n    return function () {\n      // Broadcast through the generic event name\n      $rootScope.$broadcast.bind.apply(\n            $rootScope.$broadcast,\n            [$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\n              .concat(Array.prototype.slice.call(arguments))\n          )();\n\n        // Call the original callback\n      if (callbackName && angular.isFunction(originalCallback)) {\n        originalCallback.apply(null, arguments);\n      }\n\n        // Broadcast through the message event or presence event\n      if (methodName === 'subscribe') {\n        switch (callbackName) {\n          case 'callback':\n            $rootScope.$broadcast.bind.apply(\n                  $rootScope.$broadcast,\n                  [$rootScope, service.getMessageEventNameFor(arguments[2], instanceName)]\n                    .concat(Array.prototype.slice.call(arguments))\n                )();\n            break;\n          case 'presence':\n            $rootScope.$broadcast.bind.apply(\n                  $rootScope.$broadcast,\n                  [$rootScope, service.getPresenceEventNameFor(arguments[2], instanceName)]\n                    .concat(Array.prototype.slice.call(arguments))\n                )();\n            break;\n          default:\n            break;\n        }\n      }\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/mocks.js\n **/","const pubnubConfig = require('../config.json');\n/* global angular */\nangular.module('pubnub.angular.service')\n    .factory('$pubnubChannel', ['$rootScope', 'Pubnub', '$q',\n    function ($rootScope, Pubnub, $q) {\n      /**\n      * Constructor\n      * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\n      * Optionnal parameters available to pass in the options hash:\n      * {\n      *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\n      *    autoload: 50,                // The number of messages we want to autoload from history, default: none\n      *    autosubscribe: true,         // Automatically subscribe to the channel, default: true\n      *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events, default: false\n      *    autostore: true              // Automatically store the messages received, default: true\n      *\n      * }\n      * @param {String} channel\n      * @param {Hash} config\n      * @returns {Array}\n      * @constructor\n      */\n      function PubnubChannel(channel, config) {\n        // Instanciate the PubnubChannel and return it\n        if (!(this instanceof PubnubChannel)) {\n          return new PubnubChannel(channel, config);\n        }\n\n        config = config || {};\n\n        if (!channel) {\n          throw new Error('The channel name is required');\n        }\n        // autosubscribe\n        if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\n          throw new Error('The autosubscribe parameter should be a boolean');\n        }\n        // presence\n        if (config.presence && !(typeof config.presence === 'boolean')) {\n          throw new Error('The presence parameter should be a boolean');\n        }\n        // autostore\n        if (config.autostore && !(typeof config.autostore === 'boolean')) {\n          throw new Error('The autostore parameter should be a boolean');\n        }\n\n        let self = this;\n        // The channel we get data from\n        this._channel = channel;\n        // List that will store the messages received from the channel\n        this.$messages = [];\n        // Timetoken of the first message of the list\n        // usefull for knowing from where to fetch the list history from\n        this._timeTokenFirstMessage = null;\n        // Indicates if all the messages have been fetched from PubNub history\n        this._messagesAllFetched = false;\n        // PubNub Instance that will be used by this PubNub channel\n        this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\n        // Number of messages (between 0 and 100) to autoload in this array calling PubNub history\n        this._autoload = config.autoload == null ? 0 : config.autoload;\n        // Subscribe and trigger the presence events\n        this._presence = config.presence == null ? false : config.presence;\n        // Indicates if it should automatically subscribe to the PubNub channel, default: true\n        this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\n        // Indicates if it should store automatically the messages received from PubNub\n        this._autostore = config.autostore == null ? true : config.autostore;\n\n        // Bind the public methods to make them available on the array.\n        this.$$getPublicMethods((fn, key) => {\n          self.$messages[key] = fn.bind(self);\n        });\n\n        // The handler that allow to stop listening to new messages\n        this._unsubscribeHandler = null;\n\n        // Autoload the messages\n        if (this._autoload !== 0) {\n          this.$load(this._autoload);\n        }\n\n        let eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\n        // Trigger the presence event?\n        if (this._presence) {\n          eventsToTrigger.push('presence');\n        }\n        // Automatically subscribe to the channel\n        if (this._autosubscribe) {\n          this._pubnubInstance.subscribe({\n            channel: this._channel,\n            triggerEvents: eventsToTrigger\n          });\n        }\n\n        // Automatically store the messages\n        if (this._autostore) {\n          let eventName = Pubnub.getMessageEventNameFor(self._channel, this._pubnubInstance.label);\n          this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\n        }\n\n        return this.$messages;\n      }\n\n      PubnubChannel.prototype = {\n\n        /**\n        *   Fetch and load the previous messages in the $messages array\n        *   @param {Integer} numberOfMessages : number of messages we want to load.\n        *   @returns {Promise} messages loaded or error\n        */\n        $load(numberOfMessages) {\n          if (!(numberOfMessages > 0 && numberOfMessages <= 100)) {\n            throw new Error('The number of messages to load should be a number between 0 and 100');\n          }\n\n          let self = this;\n          let deferred = $q.defer();\n\n          let args = {\n            channel: self._channel,\n            count: numberOfMessages,\n            reverse: false,\n            callback(m) {\n              // Update the timetoken of the first message\n              self._timeTokenFirstMessage = m[1];\n\n              self.$$storeBatch(m[0]);\n\n              // Updates the indicator that all messages have been fetched.\n              if (m[0].length < numberOfMessages) {\n                self._messagesAllFetched = true;\n              }\n\n              deferred.resolve(m);\n              $rootScope.$digest();\n            },\n            error(err) {\n              deferred.reject(err);\n            }\n          };\n\n          // If there is already messages in the array and consequently a first message timetoken\n          if (self._timeTokenFirstMessage) {\n            args.start = self._timeTokenFirstMessage;\n          }\n\n          self._pubnubInstance.history(args);\n          return deferred.promise;\n        },\n\n        /**\n        * Publish a message in the channel\n        * @param {Hash} message : message we want to send\n        * @returns {Promise} messages loaded or error\n        */\n        $publish(_message) {\n          let self = this;\n          let deferred = $q.defer();\n          self._pubnubInstance.publish({\n            channel: self._channel,\n            message: _message,\n            callback(m) { deferred.resolve(m); },\n            error(err) { deferred.reject(err); }\n\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n        * Return the Pubnub instance associated to this PubNub Channel\n        * @returns {Pubnub} the Pubnub instance\n        */\n        $pubnubInstance() {\n          return this._pubnubInstance;\n        },\n\n        /**\n        * Return the channel name on which this PubnubChannel\n        * @returns {String} the channel name\n        */\n        $channel() {\n          return this._channel;\n        },\n\n        /**\n        * Indicates if all the messages have been fetched\n        * @returns {Boolean} all the messages have been loaded\n        */\n        $allLoaded() {\n          return this._messagesAllFetched;\n        },\n\n        /**\n        * Inform the object to not receive the events anymore\n        * and and clears memory being used by this array\n        */\n        $destroy() {\n          if (this._unsubscribeHandler) {\n            this._unsubscribeHandler();\n          }\n          this.$messages.length = 0;\n        },\n\n        /**\n        * Called when an new message has been received in the channel from the PubNub network\n        * @protected\n        */\n        $$newMessage(ngEvent, m) {\n          this.$$store(m);\n          $rootScope.$digest();\n        },\n\n        /**\n        * Function called to store a message in the messages array.\n        * @protected\n        */\n        $$store(message) {\n          this.$messages.push(message);\n        },\n\n        /**\n        * Function called in order to store a batch of message in the messages array.\n        * @protected\n        */\n        $$storeBatch(messages) {\n          // We add the messages in the array\n          if (this.$messages.length === 0) {\n            angular.extend(this.$messages, messages);\n          } else {\n            Array.prototype.unshift.apply(this.$messages, messages);\n          }\n        },\n\n        /**\n        * These methods allow the PubNub channel to extend his array with his Public methods\n        */\n\n        // Get the list of the public methods of the PubnubChannel (prefixed by $)\n        // Return the list of the public methods of the prototype\n        $$getPublicMethods(iterator, context) {\n          this.$$getPrototypeMethods((m, k) => {\n            if (typeof(m) === 'function' && k.charAt(0) !== '_') {\n              iterator.call(context, m, k);\n            }\n          });\n        },\n\n        // Get the list of the methods of the PubnubChannel\n        // Return the list of the methods of the prototype\n        $$getPrototypeMethods(iterator, context) {\n          let methods = {};\n          let objProto = Object.getPrototypeOf({});\n          let proto = angular.isFunction(this) && angular.isObject(this.prototype) ?\n              this.prototype : Object.getPrototypeOf(this);\n          while (proto && proto !== objProto) {\n            for (let key in proto) {\n              if (proto.hasOwnProperty(key) && !methods.hasOwnProperty(key)) {\n                methods[key] = true;\n                iterator.call(context, proto[key], key, proto);\n              }\n            }\n            proto = Object.getPrototypeOf(proto);\n          }\n        }\n      };\n\n      /**\n      * This method allows a PubnubChannel to be inherited\n      * The methods passed into this function will be added onto the array's prototype.\n      /* They can override existing methods as well.\n\n      * @param {Object} methods a list of functions to add onto the prototype\n      * @returns {Function} the extended pubnubChannel object\n      * @static\n      */\n      PubnubChannel.$extend = function (methods) {\n        if (!angular.isObject(methods)) {\n          throw new Error('The methods parameter should be an object');\n        }\n\n        let ExtendedPubnubChannel = function (channel, config) {\n          if (!(this instanceof PubnubChannel)) {\n            return new ExtendedPubnubChannel(channel, config);\n          }\n          PubnubChannel.apply(this, arguments);\n          return this.$messages;\n        };\n        ExtendedPubnubChannel.prototype = Object.create(PubnubChannel.prototype);\n        angular.extend(ExtendedPubnubChannel.prototype, methods);\n\n        return ExtendedPubnubChannel;\n      };\n\n      return PubnubChannel;\n    }\n]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pubnub_channel.js\n **/","/* @flow */\n\nconst pubnubConfig = require('../config.json');\n/* global angular */\nangular.module('pubnub.angular.service')\n    .factory('$pubnubChannelGroup', ['$rootScope', '$q', 'Pubnub', '$pubnubChannel',\n        function ($rootScope, $q, Pubnub, $pubnubChannel) {\n        /**\n         * Constructor\n         * The constructor is called through this way $pubnubChannelGroup(channelGroup, options) and shoudld rarely called directely\n         * This object is a container of channels\n         * You can access to one of a channel by calling the #getChannel(channel) method\n         * Optionnal parameters available to pass in the config hash:\n         * {\n         *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\n         *    autosubscribe: true,         // Automatically subscribe to the channel group, default: true\n         *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events for the channel group, default: false\n         *    channelExtension: {foo: function(){ return \"bar\"}} // Define additionnal functions or override some for the channel instanciated\n         *\n         * }\n         * @param {String} channelGroup | {Hash} config\n         * @returns the channel group itself;\n         * @constructor\n         */\n          function PubnubChannelGroup(channelGroup, _config) {\n                // Instanciate the PubnubChannelGroup and return it\n            if (!(this instanceof PubnubChannelGroup)) {\n              return new PubnubChannelGroup(channelGroup, _config);\n            }\n\n            let self = this;\n            let config = _config || {};\n\n            if (!channelGroup) {\n              throw new Error('The channel group name is required');\n            }\n\n            // autosubscribe\n            if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\n              throw new Error('The autosubscribe parameter should be a boolean');\n            }\n            // presence\n            if (config.presence && !(typeof config.presence === 'boolean')) {\n              throw new Error('The presence parameter should be a boolean');\n            }\n\n            if (config.channelExtension && !(angular.isObject(config.channelExtension))) {\n              throw new Error('The channelExtension should be an object');\n            }\n\n            this._channelGroup = channelGroup;\n            // Maintain the list of channel objects\n            this.$channels = {};\n            // PubNub Instance that will be used by this PubNub channel\n            this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\n            // Subscribe and trigger the presence events\n            this._presence = config.presence == null ? false : config.presence;\n            // Indicates if it should automatically subscribe to the PubNub channel, default: true\n            this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\n            // Extensions for the channel beeing instanciated\n            this._extendedChannel = config.channelExtension ? $pubnubChannel.$extend(config.channelExtension) : null;\n            // The handler that allow to stop listening to new messages\n            this._unsubscribeHandler = null;\n\n            let eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\n            // Trigger the presence event?\n            if (this._presence) {\n              eventsToTrigger.push('presence');\n            }\n            // Automatically subscribe to the channel\n            if (this._autosubscribe) {\n              this._pubnubInstance.subscribe({\n                channel_group: this._channelGroup,\n                triggerEvents: eventsToTrigger\n              });\n            }\n\n            // Allow to unsubscribe to the channel group\n            let eventName = Pubnub.getMessageEventNameFor(self._channelGroup, self._pubnubInstance.label);\n            this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\n\n            return this;\n          }\n\n          PubnubChannelGroup.prototype = {\n            /**\n             * Return the channel object specified from the name\n             * the message can be from any channel of the channel group\n             * @protected\n             */\n            $channel(channel) {\n              if (!angular.isDefined(this.$channels[channel])) {\n                let options = {\n                  instance: this._pubnubInstance.label,\n                  autosubscribe: false,\n                  presence: false,\n                  autostore: true\n                };\n                let newChannel = this._extendedChannel ? new this._extendedChannel(channel, options) : $pubnubChannel(channel, options);\n                this.$channels[channel] = newChannel;\n              }\n\n              return this.$channels[channel];\n            },\n\n            /**\n             * Return the Pubnub instance associated to this PubNub Channel Group\n             * @returns {Pubnub} the Pubnub instance\n             */\n            $pubnubInstance() {\n              return this._pubnubInstance;\n            },\n\n            /**\n             * Return the channel name on which this PubnubChannelGroup is based\n             * @returns {String} the channel name\n             */\n            $channelGroup() {\n              return this._channelGroup;\n            },\n\n            /**\n             * Inform the object to not receive the events anymore\n             * and and clears memory being used by this array\n             */\n            $destroy() {\n              this._unsubscribeHandler();\n\n              for (let channel in this.$channels) {\n                if (this.$channels.hasOwnProperty(channel)) {\n                  delete this.$channels[channel];\n                }\n              }\n            },\n\n            /**\n             * Called when an new message has been received in the channel from the PubNub network\n             * the message can be from any channel of the channel group\n             * @protected\n             */\n            $$newMessage(ngEvent, message, env) {\n              let channel = env[3];\n              this.$channel(channel).$$newMessage(ngEvent, message, env);\n            }\n          };\n\n          return PubnubChannelGroup;\n        }\n    ]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pubnub_channel_group.js\n **/"],"sourceRoot":""}